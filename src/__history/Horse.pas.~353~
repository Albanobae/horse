unit Horse;

interface

uses
  System.SysUtils, System.Generics.Collections, System.Types, CGIApp,
  IPPeerServer, IPPeerAPI, IdHTTPWebBrokerBridge, Web.HTTPApp, Web.WebReq,
  Web.WebBroker, Horse.HTTP;

type

  THorseRequest = Horse.HTTP.THorseRequest;

  THorseResponse = Horse.HTTP.THorseResponse;

  THorseCallback = Horse.HTTP.THorseCallback;

  THorseMiddleware = record
    HTTPType: TMethodType;

  end;

  THorse = class
  private
    FPort: Integer;
    FRoutes: TDictionary<string, string>;
    FCallbacks: TDictionary<string, TList<THorseMiddleware>>;
    function Combine(AFirstIdentifier, ASecondIdentifier: string): string;
    function IsDev: Boolean;
    procedure StartDev;
    procedure StartProd;
    procedure DoCreate;
    procedure RegisterRoute(AType: TMethodType; APath: string;
      ACallback: THorseCallback);
    class var FInstance: THorse;
  public
    destructor Destroy; override;
    constructor Create(APort: Integer); overload;
    constructor Create; overload;
    property Port: Integer read FPort write FPort;
    procedure Get(APath: string; ACallback: THorseCallback);
    procedure Put(APath: string; ACallback: THorseCallback);
    procedure Post(APath: string; ACallback: THorseCallback);
    procedure Delete(APath: string; ACallback: THorseCallback);
    procedure Start;
    class function GetInstance: THorse;
  end;

implementation

{ THorse }

uses Horse.Constants, Horse.WebModule;

constructor THorse.Create(APort: Integer);
begin
  FPort := APort;
  DoCreate;
end;

function THorse.Combine(AFirstIdentifier, ASecondIdentifier: string): string;
const
  CONCAT_INDETIFIERS = '%s_%s';
begin
  Result := Format(CONCAT_INDETIFIERS, [AFirstIdentifier, ASecondIdentifier]);
end;

constructor THorse.Create;
begin
  FPort := DEFAULT_PORT;
  DoCreate;
end;

destructor THorse.Destroy;
begin
  FRoutes.Free;
  inherited;
end;

procedure THorse.Delete(APath: string; ACallback: THorseCallback);
begin
  RegisterRoute(mtDelete, APath, ACallback);
end;

procedure THorse.DoCreate;
begin
  FInstance := Self;
  FRoutes := TDictionary<string, string>.Create;
end;

procedure THorse.Get(APath: string; ACallback: THorseCallback);
begin
  RegisterRoute(mtGet, APath, ACallback);
end;

class function THorse.GetInstance: THorse;
begin
  Result := FInstance;
end;

function THorse.IsDev: Boolean;
var
  LHorseDev: string;
begin
  LHorseDev := GetEnvironmentVariable(HORSE_ENV);
  Result := LHorseDev.IsEmpty or (LowerCase(LHorseDev) = ENV_D) or
    (LowerCase(LHorseDev) = ENV_DEV) or
    (LowerCase(LHorseDev) = ENV_DEVELOPMENT);
end;

procedure THorse.Post(APath: string; ACallback: THorseCallback);
begin
  RegisterRoute(mtPost, APath, ACallback);
end;

procedure THorse.Put(APath: string; ACallback: THorseCallback);
begin
  RegisterRoute(mtPut, APath, ACallback);
end;

procedure THorse.RegisterRoute(AType: TMethodType; APath: string;
  ACallback: THorseCallback);
var
  LIdentifiers: TArray<string>;
  LIdentifier, LParent: string;
  LCount: Integer;
begin
  LIdentifiers := APath.Split(['/']);
  for LCount := Low(LIdentifiers) to High(LIdentifiers) do
  begin
    LParent := Combine((LCount - 1).ToString, LIdentifier);
    LIdentifier := LIdentifiers[LCount];
    begin
      FRoutes.AddOrSetValue(Combine(LCount.ToString, LIdentifier), LParent);
    end;
  end;
end;

procedure THorse.Start;
begin
  if IsDev then
    StartDev
  else
    StartProd;
end;

procedure THorse.StartDev;
var
  LHTTPWebBroker: TIdHTTPWebBrokerBridge;
begin
  WebRequestHandler.WebModuleClass := WebModuleClass;
  LHTTPWebBroker := TIdHTTPWebBrokerBridge.Create(nil);
  try
    LHTTPWebBroker.DefaultPort := FPort;
    Writeln(Format(START_RUNNING, [FPort]));
    while True do
      LHTTPWebBroker.Active := True;
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end
end;

procedure THorse.StartProd;
begin
  Application.Initialize;
  Application.WebModuleClass := WebModuleClass;
  Application.Run;
end;

end.
